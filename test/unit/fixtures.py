import pytest
import numpy as np

import smcpp._smcpp, smcpp.model

@pytest.fixture
def im():
    K = 10
    hidden_states = np.array([  0.        ,   0.0557381 ,   0.10195686,   0.12346455,
         0.13234427,   0.14137324,   0.28881064,   0.45318096,
         0.54786669,   0.62940343,   0.70119707,   0.77310611,
         0.82501483,   0.87793155,   0.93189619,   1.06666826,
         1.24549378,   1.4292705 ,   1.60683828,   1.78367717,
         1.79302099,   1.80257963,   1.8123632 ,   1.82238254,
         1.83264929,   1.84317599,   1.85397615,   1.86506434,
         1.87645635,   1.88816931,   1.90022182,   1.91263416,
         1.92542847,   1.93862903,   1.95226246,   1.96635813,
         1.98094849,   1.99606952,   2.01176128,   2.02806857,
         2.04504164,   2.06273718,   2.08121945,   2.10056165,
         2.12084775,   2.1421746 ,   2.16465481,   2.18842027,
         2.21264423,   2.23754309,   2.26416043,   2.29275117,
         2.32363152,   2.35720038,   2.39397089,   2.43461882,
         2.48005933,   2.53157553,   2.59104662,   2.661386  ,
         2.74747443,   2.85846172,   3.01488953,   3.28230463,  14.9       ])
    N0 = 10000.
    theta = 1.25e-8
    rho = theta / 4.
    n = 26
    M = len(hidden_states) - 1
    s = np.diff(np.logspace(np.log10(.01), np.log10(3.), 41))
    obs_list = [np.array([[1, 0, 10, n - 2], [10, 0, 0, n - 2], [1, 2, 2, n - 5]], dtype=np.int32)]
    im = smcpp._smcpp.PyInferenceManager(n - 2, obs_list, hidden_states, s)
    im.rho = 4.0 * N0 * rho
    im.theta = 4.0 * N0 * theta
    knots = np.logspace(np.log10(.01), np.log10(3.), K)
    model = smcpp.model.SMCModel(s, knots)
    im.model = model
    return im
